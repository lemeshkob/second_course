# об'єму вибірки
# Завантаження даних з вибірки
# Очікується файл data.txt у директорії проекту
data_from_file <- read.table('data.txt', col.names = c('Value'))
data <- data_from_file$Value
# Функція для створення інтервального варіаційного ряду з вибірки
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lover_bound', 'upper_bound', 'count')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Знаходження математичного сподівання для нормально розподіленої величини
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Знаходження дисперсії
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Знаходження точності обчислень як середньоквадратичного відхилення(метод моментів)
get_standard_deviation <- function(data_vector, delimiter = 1) {
data_vector <- sort(data_vector)
return (sqrt(get_dispersion(data_vector, delimiter)))
}
# Знаходження точності обчислень методом найбільшої подібності
get_deviation_max_likelihood <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2)
}
dispersion <- dispersion / length(data_vector)
return(sqrt(dispersion))
}
# Побудова графіків залежностей знайдених величин від розмірів вибірки
# Очікується вибірка розміром більшим за 100
size <- length(data) - 99
matrix_mean <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
matrix_deviation <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
for (i in c(100:length(data))) {
size_of_data <- i;
matrix_mean[i - 99, 1] = i;
matrix_mean[i - 99, 2] = get_mean(data[1:size_of_data], 1)
matrix_deviation[i - 99, 1] = i;
matrix_deviation[i - 99, 2] = get_standard_deviation(data[1:size_of_data], 1)
}
plot(matrix_mean[,1], matrix_mean[,2], type = "l")
plot(matrix_deviation[,1], matrix_deviation[,2], type = "l")
# У даному файлі наведена власна реалізація алгоритмів знаходження точкових оцінок параметрів розподілу
# методами моментів та найбільшої подібності. Побудовано графіки залежностей параметрів розподілу від
# об'єму вибірки
# Завантаження даних з вибірки
# Очікується файл data.txt у директорії проекту
data_from_file <- read.table('data.txt', col.names = c('Value'))
data <- data_from_file$Value
# Функція для створення інтервального варіаційного ряду з вибірки
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lover_bound', 'upper_bound', 'count')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Знаходження математичного сподівання для нормально розподіленої величини
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Знаходження дисперсії
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Знаходження точності обчислень як середньоквадратичного відхилення(метод моментів)
get_standard_deviation <- function(data_vector, delimiter = 1) {
data_vector <- sort(data_vector)
return (sqrt(get_dispersion(data_vector, delimiter)))
}
# Знаходження точності обчислень методом найбільшої подібності
get_deviation_max_likelihood <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2)
}
dispersion <- dispersion / length(data_vector)
return(sqrt(dispersion))
}
# Побудова графіків залежностей знайдених величин від розмірів вибірки
# Очікується вибірка розміром більшим за 100
size <- length(data) - 99
matrix_mean <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
matrix_deviation <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
for (i in c(100:length(data))) {
size_of_data <- i;
matrix_mean[i - 99, 1] = i;
matrix_mean[i - 99, 2] = get_mean(data[1:size_of_data], 1)
matrix_deviation[i - 99, 1] = i;
matrix_deviation[i - 99, 2] = get_standard_deviation(data[1:size_of_data], 1)
}
plot(matrix_mean[,1], matrix_mean[,2], type = "l")
plot(matrix_deviation[,1], matrix_deviation[,2], type = "l")
View(data_from_file)
# Methods for performing the second lab on R.
library("fitdistrplus")
# data - vector with data
data <- scan('path to data file', vector('integer'))
# 1.1 Method of moments
fitdist(data, "norm", "mme")
# 1.2 Mehod of most likelyhood
fitdist(data, "norm", "mle")
# 3 Generating plot
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l") # drawing the plot
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# 1.1 Method of moments
fitdist(data, "norm", "mme")
indexer <- 1
# У даному файлі наведена власна реалізація алгоритмів знаходження точкових оцінок параметрів розподілу
# методами моментів та найбільшої подібності. Побудовано графіки залежностей параметрів розподілу від
# об'єму вибірки
# Завантаження даних з вибірки
# Очікується файл data.txt у директорії проекту
data_from_file <- read.table('data.txt', col.names = c('Value'))
data <- data_from_file$Value
# Функція для створення інтервального варіаційного ряду з вибірки
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lover_bound', 'upper_bound', 'count')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Знаходження математичного сподівання для нормально розподіленої величини
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Знаходження дисперсії
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Знаходження точності обчислень як середньоквадратичного відхилення(метод моментів)
get_standard_deviation <- function(data_vector, delimiter = 1) {
data_vector <- sort(data_vector)
return (sqrt(get_dispersion(data_vector, delimiter)))
}
# Знаходження точності обчислень методом найбільшої подібності
get_deviation_max_likelihood <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2)
}
dispersion <- dispersion / length(data_vector)
return(sqrt(dispersion))
}
# Побудова графіків залежностей знайдених величин від розмірів вибірки
# Очікується вибірка розміром більшим за 100
size <- length(data) - 99
matrix_mean <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
matrix_deviation <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
for (i in c(100:length(data))) {
size_of_data <- i;
matrix_mean[i - 99, 1] = i;
matrix_mean[i - 99, 2] = get_mean(data[1:size_of_data], 1)
matrix_deviation[i - 99, 1] = i;
matrix_deviation[i - 99, 2] = get_standard_deviation(data[1:size_of_data], 1)
}
plot(matrix_mean[,1], matrix_mean[,2], type = "l")
plot(matrix_deviation[,1], matrix_deviation[,2], type = "l")
# install package:
install.packages("fitdistrplus")
# import package:
library("fitdistrplus")
# data - vector with data
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
# 2:
# use your creativity :)
# 3:
# you have to plot the estimation of the sample size
# to create graph:
plot(x, y)
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# install package:
install.packages("fitdistrplus")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
install.packages("fitdistrplus")
# install package:
install.packages("fitdistrplus")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y)
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
Cdata <- read.csv("data.csv", header =FALSE)
c <- as.numeric(Cdata)
srk<-function(p,Data){
vc <- NULL;
iter <- 0;
for(val in p){
CsData <- Data[1:val]
ar_centr <- mean(CsData)
sum <- 0;
for (i in 1:length(CsData))
{
sum <- sum+ (CsData[i]-ar_centr)^2;
}
sig <- sqrt(sum/val);
iter<-iter +1 ;
if (iter==1) {vc<-c(sig);}
else {vc<-c(vc,sig);}
}
return(vc);
}
x <- c(20,30,50,80,120,140,160,180,190,202)
m <- srk(x,c)
xyplot(m~x,type =c("l","p") ,col.line="black")
Cdata <- read.csv("data.csv", header =FALSE)
c <- as.numeric(Cdata)
srk<-function(p,Data){
vc <- NULL;
iter <- 0;
for(val in p){
CsData <- Data[1:val]
ar_centr <- mean(CsData)
sum <- 0;
for (i in 1:length(CsData))
{
sum <- sum+ (CsData[i]-ar_centr)^2;
}
sig <- sqrt(sum/val);
iter<-iter +1 ;
if (iter==1) {vc<-c(sig);}
else {vc<-c(vc,sig);}
}
return(vc);
}
x <- c(20,30,50,80,120,140,160,180,190,202)
m <- srk(x,c)
plot(m~x,type =c("l","p") ,col.line="black")
Cdata <- read.csv("data.csv", header =FALSE)
c <- as.numeric(Cdata)
srk<-function(p,Data){
vc <- NULL;
iter <- 0;
for(val in p){
CsData <- Data[1:val]
ar_centr <- mean(CsData)
sum <- 0;
for (i in 1:length(CsData))
{
sum <- sum+ (CsData[i]-ar_centr)^2;
}
sig <- sqrt(sum/val);
iter<-iter +1 ;
if (iter==1) {vc<-c(sig);}
else {vc<-c(vc,sig);}
}
return(vc);
}
x <- c(20,30,50,80,120,140,160,180,190,202)
m <- srk(x,c)
xyplot(m~x,type =c("l","p") ,col.line="black")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
