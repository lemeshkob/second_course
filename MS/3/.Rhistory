15,
28,
32,
31,
28,
22,
23,
19,
21,
21,
26,
20,
35
)
inputData
#робимо вектор з вхідної таблиці inpudData
data <-as.vector(t(inputData))
data
n <- length(data)
p <- 0.95
error <- qnorm(p) * sd(data) / sqrt(n)
sd <- sqrt((n/(n - 1)) * var(data)) * sqrt(n - 1)
upper <- qchisq((1 + p) / 2, n - 1)
lower <- qchisq((1 - p) / 2, n - 1)
mean(data) + c(-error, error)
sd / c(sqrt(upper), sqrt(lower))
x<-list()
means_up<-list()
means_down<-list()
sds_up<-list()
sds_down<-list()
j=0
for (i in 55:99){
j=j+1
x[j]<-i
p<-i/100
error <- qnorm(p) * sd(data) / sqrt(n)
sd <- sqrt((n/(n - 1)) * var(data)) * sqrt(n - 1)
upper <- qchisq((1 + p) / 2, n - 1)
lower <- qchisq((1 - p) / 2, n - 1)
means_up[j]<-mean(data) + error
means_down[j]<-mean(data) - error
sds_up[j]<-sd / sqrt(lower)
sds_down[j]<-sd / sqrt(upper)
}
plot(x,means_up,type = "l",ylim = c(50,100))
for(j in 2:length(x)){
lines(c(x[j-1],x[j]),c(means_down[j-1],means_down[j]))
}
x<-list()
means_up<-list()
means_down<-list()
sds_up<-list()
sds_down<-list()
j=0
dat<-data
for (i in 20:length(data)){
j=j+1
x[j]<-i
p<-0.95
data<-dat[1:i]
n <- length(data)
error <- qnorm(p) * sd(data) / sqrt(n)
sd <- sqrt((n/(n - 1)) * var(data)) * sqrt(n - 1)
upper <- qchisq((1 + p) / 2, n - 1)
lower <- qchisq((1 - p) / 2, n - 1)
means_up[j]<-mean(data) + error
means_down[j]<-mean(data) - error
sds_up[j]<-sd / sqrt(lower)
sds_down[j]<-sd / sqrt(upper)
}
plot(x,means_up,type = "l", ylim=c(20, 30))
for(j in 2:length(x)){
lines(c(x[j-1],x[j]),c(means_down[j-1],means_down[j]))
}
Avg = mean(data)
Ser_Vidh = sd(data)
Desp <- Ser_Vidh^2
t<- 1.976
SV = sqrt(length(data) * Desp/(length(data) - 1))
NMatSpod = Avg - (t*SV/sqrt(length(data)))
VMatSpod = Avg + (t*SV/sqrt(length(data)))
q = 0.137;
NMezha = SV*(1-q)
VMezha = SV*(1+q)
# Для початку роботи необхідно завантажити дані та розбити їх на інтервали,
# оптимальний розмір яких було досліджено у минулих лабораторних роботах
setwd("C:/Users/pipiska/Desktop/Теор вер")
data_from_file <- read.table('veb.csv', col.names = c('Value'))
data <- data_from_file$Value
# Функція розбиття вибірки на інтервали потужністю delimiter
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lower_bound', 'upper_bound', 'frequency')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Функція знаходження вибіркового середнього
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Функція знаходження дисперсії вибірки
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Відсортуємо дані
data <- sort(data)
# Наступні обчислення будуть проводитися для інтервального варіаційного ряду,
# потужність якого 5
interval_power <- 5
# Розбиваєно дані на інтервали потужністю 5
data_table <- as_interval_variation(data, interval_power)
data_table <- as.data.frame(data_table)
# Параметри вибірки--------------------------------------------------------------------------------------------—
# Кількість інтервалів
data_count <- nrow(data_table)
# Ступінь свободи
free_level <- data_count - 1
# Вибіркове середнє
average <- get_mean(data, interval_power)
# Дисперсія вибірки
variance <- get_dispersion(data, interval_power)
# Виправлена дисперсія
corrected_variance <- (data_count / (data_count - 1)) * variance
# Виправлене сереньоквадратичне відхилення
corrected_average_deviation <- sqrt(corrected_variance)
# Рівень довіри
trust_level <- 0.05
#-------------------------------------------------------------------------------------------------------------—
# Перевіримо гіпотезу про рівність вибіркової середньої генеральній середній
# нормальної сукупності, дисперсія якої невідома, при рівні довіри: trust_level.
# Приймемо за нульову гіпотезу, що генеральна середня дорівнює hypothetical_average
# Приймемо за
альтернативну гіпотезу, що генеральна середня не дорівнює hypothetical_average
# Гіпотетичне значення генерального середнього
hypothetical_average <- 80
# Як критерій перевірки оберемо наступну величину
inspection_criterion <- ((average - hypothetical_average) * sqrt(data_count)) / corrected_average_deviation
# Оберемо двохсторонню критичну область
# Критичну точку знайдемо за розподілом Стьюдента з рівнем значущості trust_level та
# ступенем свободи free_level
# Функцій qt повертає значення критичної точки для розподілу Стьюдента, при рівні значущості
# trust_level та ступені свободи free_level
critical_point <- qt(trust_level, free_level)
right_limit <- abs(critical_point)
left_limit <- (-right_limit)
# Якщо спостережене значення критерію(inspection_criterion) входить в інтервал (left_limit; right_limit), то немає
# підстав відхилити гіпотезу. Інакше - нульова гіпотеза відхиляється
#-------------------------------------------------------------------------------------------------------------—
# Перевіримо гіпотезу про рівність виправленої вибіркової дисперсії гіпотетичній
# генеральній дисперсії нормальної сукупності, при рівні довіри: trust_level.
# Приймемо за нульову гіпотезу, що генеральна дисперсія сукупності дорівнює гіпотетичному значенню hypothetical_dispersion
# Приймемо за альтернативну гіпотезу, що генеральна дисперсія не дорівнює hypothetical_dispersion
# Гіпотетичне значення генеральної дисперсії
hypothetical_dispersion <- 160
# Як критерій перевірки оберемо відношення виправленої дисперсії до гіпотетичного значення
# генеральної дисперсії
inspection_criterion <- ((data_count - 1) * corrected_variance) / hypothetical_dispersion
# Оберемо двохсторонню критичну область
# Критичні точки знайдемо за розподілом хі-квадрат(критерій Пірсона) з рівнем значущості trust_level та
# ступенем свободи free_level
# Функцій qchisq повертає значення критичної точки для розподілу хі-квадрат, при рівні значущості
# trust_level та ступені свободи free_level
left_critical_point <- qchisq(trust_level / 2, free_level)
right_critical_point <- qchisq(1 - trust_level / 2, free_level)
# Якщо спостережене значення критерію(inspection_criterion) входить в інтервал (left_limit; right_limit), то немає
# підстав відхилити гіпотезу. Інакше - нульова гіпотеза відхиляється
#---------------------------------------------------------------------------------------------------------------
setwd("C:\\Users\\lemes\\Desktop\\STUDY\\MS\\4")
# Для початку роботи необхідно завантажити дані та розбити їх на інтервали,
# оптимальний розмір яких було досліджено у минулих лабораторних роботах
setwd("C:/Users/pipiska/Desktop/Теор вер")
data_from_file <- read.table('veb.csv', col.names = c('Value'))
data <- data_from_file$Value
# Функція розбиття вибірки на інтервали потужністю delimiter
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lower_bound', 'upper_bound', 'frequency')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Функція знаходження вибіркового середнього
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Функція знаходження дисперсії вибірки
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Відсортуємо дані
data <- sort(data)
# Наступні обчислення будуть проводитися для інтервального варіаційного ряду,
# потужність якого 5
interval_power <- 5
# Розбиваєно дані на інтервали потужністю 5
data_table <- as_interval_variation(data, interval_power)
data_table <- as.data.frame(data_table)
# Параметри вибірки--------------------------------------------------------------------------------------------—
# Кількість інтервалів
data_count <- nrow(data_table)
# Ступінь свободи
free_level <- data_count - 1
# Вибіркове середнє
average <- get_mean(data, interval_power)
# Дисперсія вибірки
variance <- get_dispersion(data, interval_power)
# Виправлена дисперсія
corrected_variance <- (data_count / (data_count - 1)) * variance
# Виправлене сереньоквадратичне відхилення
corrected_average_deviation <- sqrt(corrected_variance)
# Рівень довіри
trust_level <- 0.05
#-------------------------------------------------------------------------------------------------------------—
# Перевіримо гіпотезу про рівність вибіркової середньої генеральній середній
# нормальної сукупності, дисперсія якої невідома, при рівні довіри: trust_level.
# Приймемо за нульову гіпотезу, що генеральна середня дорівнює hypothetical_average
# Приймемо за
альтернативну гіпотезу, що генеральна середня не дорівнює hypothetical_average
# Гіпотетичне значення генерального середнього
hypothetical_average <- 80
# Як критерій перевірки оберемо наступну величину
inspection_criterion <- ((average - hypothetical_average) * sqrt(data_count)) / corrected_average_deviation
# Оберемо двохсторонню критичну область
# Критичну точку знайдемо за розподілом Стьюдента з рівнем значущості trust_level та
# ступенем свободи free_level
# Функцій qt повертає значення критичної точки для розподілу Стьюдента, при рівні значущості
# trust_level та ступені свободи free_level
critical_point <- qt(trust_level, free_level)
right_limit <- abs(critical_point)
left_limit <- (-right_limit)
# Якщо спостережене значення критерію(inspection_criterion) входить в інтервал (left_limit; right_limit), то немає
# підстав відхилити гіпотезу. Інакше - нульова гіпотеза відхиляється
#-------------------------------------------------------------------------------------------------------------—
# Перевіримо гіпотезу про рівність виправленої вибіркової дисперсії гіпотетичній
# генеральній дисперсії нормальної сукупності, при рівні довіри: trust_level.
# Приймемо за нульову гіпотезу, що генеральна дисперсія сукупності дорівнює гіпотетичному значенню hypothetical_dispersion
# Приймемо за альтернативну гіпотезу, що генеральна дисперсія не дорівнює hypothetical_dispersion
# Гіпотетичне значення генеральної дисперсії
hypothetical_dispersion <- 160
# Як критерій перевірки оберемо відношення виправленої дисперсії до гіпотетичного значення
# генеральної дисперсії
inspection_criterion <- ((data_count - 1) * corrected_variance) / hypothetical_dispersion
# Оберемо двохсторонню критичну область
# Критичні точки знайдемо за розподілом хі-квадрат(критерій Пірсона) з рівнем значущості trust_level та
# ступенем свободи free_level
# Функцій qchisq повертає значення критичної точки для розподілу хі-квадрат, при рівні значущості
# trust_level та ступені свободи free_level
left_critical_point <- qchisq(trust_level / 2, free_level)
right_critical_point <- qchisq(1 - trust_level / 2, free_level)
# Якщо спостережене значення критерію(inspection_criterion) входить в інтервал (left_limit; right_limit), то немає
# підстав відхилити гіпотезу. Інакше - нульова гіпотеза відхиляється
#---------------------------------------------------------------------------------------------------------------
setwd("C:\\Users\\lemes\\Desktop\\STUDY\\MS\\4")
# Для початку роботи необхідно завантажити дані та розбити їх на інтервали,
# оптимальний розмір яких було досліджено у минулих лабораторних роботах
data_from_file <- read.table('veb.csv', col.names = c('Value'))
data <- data_from_file$Value
# Функція розбиття вибірки на інтервали потужністю delimiter
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lower_bound', 'upper_bound', 'frequency')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Функція знаходження вибіркового середнього
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Функція знаходження дисперсії вибірки
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Відсортуємо дані
data <- sort(data)
# Наступні обчислення будуть проводитися для інтервального варіаційного ряду,
# потужність якого 5
interval_power <- 5
# Розбиваєно дані на інтервали потужністю 5
data_table <- as_interval_variation(data, interval_power)
data_table <- as.data.frame(data_table)
# Параметри вибірки--------------------------------------------------------------------------------------------—
# Кількість інтервалів
data_count <- nrow(data_table)
# Ступінь свободи
free_level <- data_count - 1
# Вибіркове середнє
average <- get_mean(data, interval_power)
# Дисперсія вибірки
variance <- get_dispersion(data, interval_power)
# Виправлена дисперсія
corrected_variance <- (data_count / (data_count - 1)) * variance
# Виправлене сереньоквадратичне відхилення
corrected_average_deviation <- sqrt(corrected_variance)
# Рівень довіри
trust_level <- 0.05
#-------------------------------------------------------------------------------------------------------------—
# Перевіримо гіпотезу про рівність вибіркової середньої генеральній середній
# нормальної сукупності, дисперсія якої невідома, при рівні довіри: trust_level.
# Приймемо за нульову гіпотезу, що генеральна середня дорівнює hypothetical_average
# Приймемо за
альтернативну гіпотезу, що генеральна середня не дорівнює hypothetical_average
# Гіпотетичне значення генерального середнього
hypothetical_average <- 80
# Як критерій перевірки оберемо наступну величину
inspection_criterion <- ((average - hypothetical_average) * sqrt(data_count)) / corrected_average_deviation
# Оберемо двохсторонню критичну область
# Критичну точку знайдемо за розподілом Стьюдента з рівнем значущості trust_level та
# ступенем свободи free_level
# Функцій qt повертає значення критичної точки для розподілу Стьюдента, при рівні значущості
# trust_level та ступені свободи free_level
critical_point <- qt(trust_level, free_level)
right_limit <- abs(critical_point)
left_limit <- (-right_limit)
# Якщо спостережене значення критерію(inspection_criterion) входить в інтервал (left_limit; right_limit), то немає
# підстав відхилити гіпотезу. Інакше - нульова гіпотеза відхиляється
#-------------------------------------------------------------------------------------------------------------—
# Перевіримо гіпотезу про рівність виправленої вибіркової дисперсії гіпотетичній
# генеральній дисперсії нормальної сукупності, при рівні довіри: trust_level.
# Приймемо за нульову гіпотезу, що генеральна дисперсія сукупності дорівнює гіпотетичному значенню hypothetical_dispersion
# Приймемо за альтернативну гіпотезу, що генеральна дисперсія не дорівнює hypothetical_dispersion
# Гіпотетичне значення генеральної дисперсії
hypothetical_dispersion <- 160
# Як критерій перевірки оберемо відношення виправленої дисперсії до гіпотетичного значення
# генеральної дисперсії
inspection_criterion <- ((data_count - 1) * corrected_variance) / hypothetical_dispersion
# Оберемо двохсторонню критичну область
# Критичні точки знайдемо за розподілом хі-квадрат(критерій Пірсона) з рівнем значущості trust_level та
# ступенем свободи free_level
# Функцій qchisq повертає значення критичної точки для розподілу хі-квадрат, при рівні значущості
# trust_level та ступені свободи free_level
left_critical_point <- qchisq(trust_level / 2, free_level)
right_critical_point <- qchisq(1 - trust_level / 2, free_level)
# Якщо спостережене значення критерію(inspection_criterion) входить в інтервал (left_limit; right_limit), то немає
# підстав відхилити гіпотезу. Інакше - нульова гіпотеза відхиляється
#---------------------------------------------------------------------------------------------------------------
setwd("C:\\Users\\lemes\\Desktop\\STUDY\\MS\\3")
p<-5
q<-10
dataTable <- read.table("data.txt")
dataTable<-as.vector(t(dataTable))
dataTable<-matrix(dataTable,nrow=q,ncol=p)
mean_array<-c()
i<-1
while(i<=p){
sum<-0
k<-1
while(k<=q){
sum<-sum+as.numeric(dataTable[k,i])
k<-k+1
}
mean_array[i]<-sum/q
i<-i+1
}
Seredne<-mean(mean_array)
sumfact<-0
sumzal<-0
for(i in range(1:p)){
sumfact<-sumfact+(mean_array[i]-Seredne)^2
}
sumfact<-sumfact*q
i<-1
while(i<=p){
k<-1
while(k<=q){
sumzal<-sumzal+(dataTable[k,i]-Seredne)^2
k<-k+1
}
i<-i+1
}
KriteriySp<-(sumfact/(p-1))/(sumzal/(p*(q-1)))
KriteriySp
KriteriyKr<-5.99
KriteriySp<-(sumfact/(p-1))/(sumzal/(p*(q-1)))
KriteriySp
KriteriyKr
KriteriySp<KriteriyKr
plot(y=mean_array,x=c(100,1000,3000,10000,50000),ylim = c(0,10),xlab = "size",ylab = "miliseconds")
