# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
# У даному файлі наведена власна реалізація алгоритмів знаходження точкових оцінок параметрів розподілу
# методами моментів та найбільшої подібності. Побудовано графіки залежностей параметрів розподілу від
# об'єму вибірки
# Завантаження даних з вибірки
# Очікується файл data.txt у директорії проекту
data_from_file <- read.table('data.txt', col.names = c('Value'))
data <- data_from_file$Value
# Функція для створення інтервального варіаційного ряду з вибірки
as_interval_variation <- function(data_vector, delimiter = 1) {
min_value = data_vector[1]
max_value = data_vector[length(data_vector)]
data_matrix <- matrix(ncol = 3, nrow = ceiling((max_value - min_value + 1) / delimiter),
dimnames = list(NULL, c('lover_bound', 'upper_bound', 'count')))
iterator_value <- min_value
indexer <- 1
# Заповнення нижньої та верхньої границь інтервалу
while (iterator_value <= max_value) {
upper_bound <- iterator_value + delimiter - 1
if (upper_bound > max_value)
upper_bound = max_value
data_matrix[indexer, 1] = iterator_value
data_matrix[indexer, 2] = upper_bound
iterator_value <- iterator_value + delimiter
indexer <- indexer + 1
}
for (row_index in c(1:nrow(data_matrix))) {
data_matrix[row_index, 3] <- 0
}
# Підрахунок число значень, що потрапили в інтервал
# Запис результатів у масив
for (value in data_vector) {
index <- (value - min_value) / delimiter + 1
data_matrix[index, 3] <- data_matrix[index, 3] + 1
}
return(data_matrix)
}
# Знаходження математичного сподівання для нормально розподіленої величини
get_mean <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector))
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
sum <- 0
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
sum <- sum + middle_value * as.numeric(interval_data[row, 3])
}
mean <- sum / length(data_vector)
return(mean)
}
# Знаходження дисперсії
get_dispersion <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2) * as.numeric(interval_data[row, 3])
}
dispersion <- dispersion / length(data_vector)
return(dispersion)
}
# Знаходження точності обчислень як середньоквадратичного відхилення(метод моментів)
get_standard_deviation <- function(data_vector, delimiter = 1) {
data_vector <- sort(data_vector)
return (sqrt(get_dispersion(data_vector, delimiter)))
}
# Знаходження точності обчислень методом найбільшої подібності
get_deviation_max_likelihood <- function(data_vector, delimiter = 1) {
if (delimiter < 1 | delimiter > length(data_vector) | length(data_vector) == 0)
return(NULL)
data_vector <- sort(data_vector)
interval_data <- as_interval_variation(data_vector, delimiter)
rows_count <- nrow(interval_data)
dispersion <- 0
mean <- get_mean(data_vector, delimiter)
for (row in c(1: rows_count)) {
middle_value <- as.numeric((interval_data[row, 1] + interval_data[row, 2]) / 2)
dispersion <- dispersion + ((middle_value - mean) ^ 2)
}
dispersion <- dispersion / length(data_vector)
return(sqrt(dispersion))
}
# Побудова графіків залежностей знайдених величин від розмірів вибірки
# Очікується вибірка розміром більшим за 100
size <- length(data) - 99
matrix_mean <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
matrix_deviation <- matrix(ncol = 2, nrow = size,
dimnames = list(NULL, c('size', 'value')))
for (i in c(100:length(data))) {
size_of_data <- i;
matrix_mean[i - 99, 1] = i;
matrix_mean[i - 99, 2] = get_mean(data[1:size_of_data], 1)
matrix_deviation[i - 99, 1] = i;
matrix_deviation[i - 99, 2] = get_standard_deviation(data[1:size_of_data], 1)
}
plot(matrix_mean[,1], matrix_mean[,2], type = "l")
plot(matrix_deviation[,1], matrix_deviation[,2], type = "l")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
# import package:
library("fitdistrplus")
data <- scan('C:\\Users\\lemes\\Desktop\\STUDY\\MS\\2\\data.txt', vector('integer'))
# x - data for 0x axis
# y - data for 0y axis
# 1.1:
fitdist(data, "norm", "mme")
# 1.2:
fitdist(data, "norm", "mle")
y <- list() # initializing variables
j <- 0
x <- list()
for (i in 20:length(data)) { # traversing range 20..(length of data)
if (i %% 20) {
next
} # skipping each 19 elements
y[j] <- sd(data[0:i]) # calculating sd for a given range
x[j] <- i # writing range size
j <- j+1
}
plot(x, y, ylim=c(0, 15), type="l")
setwd("C:\\Users\\lemes\\Desktop\\STUDY\\MS\\3")
inputData <- scan('data.txt', vector('integer'))
inputData
setwd("C:\\Users\\lemes\\Desktop\\STUDY\\MS\\3")
inputData <- scan('data.txt', vector('integer'))
inputData
sorted <- sort(inputData)
sorted
# Завантажимо експерементальні дані
data_table <- read.table('data.txt')
# Для наочності - відобразимо дані за допомогою діаграми розмаху (ящик з вусами)
boxplot(data_table$ellapsedTime ~ data_table$sameDataLevel,
xlab = 'Кількість однакових даних(у відсотках)',
ylab = 'Час сортування, мс')
# Знайдемо параметри для дисперсійного аналізу
# Функція aov повертає необхідні параметри для дисперсійного аналізу
# Одним з головних є F value - статистична характеристика
aov_params <- aov(ellapsedTime ~ sameDataLevel, data = data_table)
# Виведемо результат aov_params в наочному вигляді
summary(aov_params)
# Для спростування або підтвердження гіпотези необхідно порівняти
# спостережене значення (F value) з критичним значенням з розподілу Фішера
# із ступенями свободи (p-1) та p * (q-1), де p - к-ть рівнів фактора та
# q - к-ть дослідів
# Функція aov повертає ці значення у колонці Df
# Функція qf повертає критичне значення з розподілу Фішера для вказаного рівня
# значущості(перший аргумент: 1-а) та рівнів свободи(аргументи 1, 2)
qf(0.95, df1=5, df2=110)
frame = data.frame(time=c(0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
0.0468, 0.0312, 0.0312, 0.0468, 0.0312, 0.0468,
0.0780, 0.0780, 0.0780, 0.0624, 0.0780, 0.0780,
0.1092, 0.1092, 0.1248, 0.1092, 0.1716, 0.1092,
0.1404, 0.1560, 0.1404, 0.1404, 0.1872, 0.1716), count=rep(c('10','30','50','70','90'),c(6,6,6,6,6)))
boxplot(frame$time ~ frame$count)
tapply(frame$time, frame$count, mean)
ajuste <- lm(frame$time ~ frame$count)
summary(ajuste)
anova(ajuste)
a1 = aov(frame$time ~ frame$count)
summary(a1)
path = getwd()
p<-5
q<-10
dataTable <- read.table("data.txt")
dataTable<-as.vector(t(dataTable))
dataTable<-matrix(dataTable,nrow=q,ncol=p)
mean_array<-c()
i<-1
while(i<=p){
sum<-0
k<-1
while(k<=q){
sum<-sum+as.numeric(dataTable[k,i])
k<-k+1
}
mean_array[i]<-sum/q
i<-i+1
}
Seredne<-mean(mean_array)
sumfact<-0
sumzal<-0
for(i in range(1:p)){
sumfact<-sumfact+(mean_array[i]-Seredne)^2
}
sumfact<-sumfact*q
i<-1
while(i<=p){
k<-1
while(k<=q){
sumzal<-sumzal+(dataTable[k,i]-Seredne)^2
k<-k+1
}
i<-i+1
}
KriteriySp<-(sumfact/(p-1))/(sumzal/(p*(q-1)))
KriteriyKr<-5.99
KriteriySp<-(sumfact/(p-1))/(sumzal/(p*(q-1)))
KriteriySp
KriteriyKr
KriteriySp<KriteriyKr
plot(y=mean_array,x=c(100,1000,3000,10000,50000),ylim = c(0,10),xlab = "size",ylab = "miliseconds")
setwd("C:\\Users\\lemes\\Desktop\\STUDY\\MS\\6")
p<-5
q<-10
dataTable <- read.table("data.txt")
dataTable<-as.vector(t(dataTable))
dataTable<-matrix(dataTable,nrow=q,ncol=p)
mean_array<-c()
i<-1
while(i<=p){
sum<-0
k<-1
while(k<=q){
sum<-sum+as.numeric(dataTable[k,i])
k<-k+1
}
mean_array[i]<-sum/q
i<-i+1
}
Seredne<-mean(mean_array)
sumfact<-0
sumzal<-0
for(i in range(1:p)){
sumfact<-sumfact+(mean_array[i]-Seredne)^2
}
sumfact<-sumfact*q
i<-1
while(i<=p){
k<-1
while(k<=q){
sumzal<-sumzal+(dataTable[k,i]-Seredne)^2
k<-k+1
}
i<-i+1
}
KriteriySp<-(sumfact/(p-1))/(sumzal/(p*(q-1)))
KriteriyKr<-5.99
KriteriySp<-(sumfact/(p-1))/(sumzal/(p*(q-1)))
KriteriySp
KriteriyKr
KriteriySp<KriteriyKr
plot(y=mean_array,x=c(100,1000,3000,10000,50000),ylim = c(0,10),xlab = "size",ylab = "miliseconds")
